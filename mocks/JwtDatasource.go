// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/daniarmas/notes/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// JwtDatasource is an autogenerated mock type for the JwtDatasource type
type JwtDatasource struct {
	mock.Mock
}

// CreateJWT provides a mock function with given fields: tokenMetadata, expirationTime
func (_m *JwtDatasource) CreateJWT(tokenMetadata *domain.JWTMetadata, expirationTime time.Time) (*string, error) {
	ret := _m.Called(tokenMetadata, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for CreateJWT")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.JWTMetadata, time.Time) (*string, error)); ok {
		return rf(tokenMetadata, expirationTime)
	}
	if rf, ok := ret.Get(0).(func(*domain.JWTMetadata, time.Time) *string); ok {
		r0 = rf(tokenMetadata, expirationTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.JWTMetadata, time.Time) error); ok {
		r1 = rf(tokenMetadata, expirationTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseJWT provides a mock function with given fields: tokenMetadata
func (_m *JwtDatasource) ParseJWT(tokenMetadata *domain.JWTMetadata) error {
	ret := _m.Called(tokenMetadata)

	if len(ret) == 0 {
		panic("no return value specified for ParseJWT")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.JWTMetadata) error); ok {
		r0 = rf(tokenMetadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewJwtDatasource creates a new instance of JwtDatasource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtDatasource(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtDatasource {
	mock := &JwtDatasource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
