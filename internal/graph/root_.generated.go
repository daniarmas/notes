// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/daniarmas/notes/internal/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessToken struct {
		CreateTime     func(childComplexity int) int
		ID             func(childComplexity int) int
		RefreshTokenID func(childComplexity int) int
		UpdateTime     func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	CreatePresignedUrlsResponse struct {
		Urls func(childComplexity int) int
	}

	File struct {
		CreateTime    func(childComplexity int) int
		ID            func(childComplexity int) int
		NoteID        func(childComplexity int) int
		OriginalFile  func(childComplexity int) int
		ProcessedFile func(childComplexity int) int
		URL           func(childComplexity int) int
		UpdateTime    func(childComplexity int) int
	}

	Mutation struct {
		CreateNote         func(childComplexity int, input model.CreateNoteInput) int
		CreatePresignedURL func(childComplexity int, objectName []string) int
		SignIn             func(childComplexity int, input model.SignInInput) int
		SignOut            func(childComplexity int) int
	}

	Note struct {
		Content    func(childComplexity int) int
		CreateTime func(childComplexity int) int
		Files      func(childComplexity int) int
		ID         func(childComplexity int) int
		Title      func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	NotesResponse struct {
		Cursor func(childComplexity int) int
		Notes  func(childComplexity int) int
	}

	PresignedUrl struct {
		File     func(childComplexity int) int
		ObjectID func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	Query struct {
		ListNotes func(childComplexity int, input *model.NotesInput) int
		Me        func(childComplexity int) int
	}

	RefreshToken struct {
		CreateTime func(childComplexity int) int
		ID         func(childComplexity int) int
		UpdateTime func(childComplexity int) int
		UserID     func(childComplexity int) int
	}

	SignInResponse struct {
		AccessToken  func(childComplexity int) int
		RefreshToken func(childComplexity int) int
		User         func(childComplexity int) int
	}

	User struct {
		CreateTime func(childComplexity int) int
		Email      func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		UpdateTime func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AccessToken.createTime":
		if e.complexity.AccessToken.CreateTime == nil {
			break
		}

		return e.complexity.AccessToken.CreateTime(childComplexity), true

	case "AccessToken.id":
		if e.complexity.AccessToken.ID == nil {
			break
		}

		return e.complexity.AccessToken.ID(childComplexity), true

	case "AccessToken.refreshTokenId":
		if e.complexity.AccessToken.RefreshTokenID == nil {
			break
		}

		return e.complexity.AccessToken.RefreshTokenID(childComplexity), true

	case "AccessToken.updateTime":
		if e.complexity.AccessToken.UpdateTime == nil {
			break
		}

		return e.complexity.AccessToken.UpdateTime(childComplexity), true

	case "AccessToken.userId":
		if e.complexity.AccessToken.UserID == nil {
			break
		}

		return e.complexity.AccessToken.UserID(childComplexity), true

	case "CreatePresignedUrlsResponse.Urls":
		if e.complexity.CreatePresignedUrlsResponse.Urls == nil {
			break
		}

		return e.complexity.CreatePresignedUrlsResponse.Urls(childComplexity), true

	case "File.createTime":
		if e.complexity.File.CreateTime == nil {
			break
		}

		return e.complexity.File.CreateTime(childComplexity), true

	case "File.id":
		if e.complexity.File.ID == nil {
			break
		}

		return e.complexity.File.ID(childComplexity), true

	case "File.noteId":
		if e.complexity.File.NoteID == nil {
			break
		}

		return e.complexity.File.NoteID(childComplexity), true

	case "File.originalFile":
		if e.complexity.File.OriginalFile == nil {
			break
		}

		return e.complexity.File.OriginalFile(childComplexity), true

	case "File.processedFile":
		if e.complexity.File.ProcessedFile == nil {
			break
		}

		return e.complexity.File.ProcessedFile(childComplexity), true

	case "File.url":
		if e.complexity.File.URL == nil {
			break
		}

		return e.complexity.File.URL(childComplexity), true

	case "File.updateTime":
		if e.complexity.File.UpdateTime == nil {
			break
		}

		return e.complexity.File.UpdateTime(childComplexity), true

	case "Mutation.createNote":
		if e.complexity.Mutation.CreateNote == nil {
			break
		}

		args, err := ec.field_Mutation_createNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNote(childComplexity, args["input"].(model.CreateNoteInput)), true

	case "Mutation.createPresignedUrl":
		if e.complexity.Mutation.CreatePresignedURL == nil {
			break
		}

		args, err := ec.field_Mutation_createPresignedUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePresignedURL(childComplexity, args["objectName"].([]string)), true

	case "Mutation.signIn":
		if e.complexity.Mutation.SignIn == nil {
			break
		}

		args, err := ec.field_Mutation_signIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignIn(childComplexity, args["input"].(model.SignInInput)), true

	case "Mutation.signOut":
		if e.complexity.Mutation.SignOut == nil {
			break
		}

		return e.complexity.Mutation.SignOut(childComplexity), true

	case "Note.content":
		if e.complexity.Note.Content == nil {
			break
		}

		return e.complexity.Note.Content(childComplexity), true

	case "Note.createTime":
		if e.complexity.Note.CreateTime == nil {
			break
		}

		return e.complexity.Note.CreateTime(childComplexity), true

	case "Note.files":
		if e.complexity.Note.Files == nil {
			break
		}

		return e.complexity.Note.Files(childComplexity), true

	case "Note.id":
		if e.complexity.Note.ID == nil {
			break
		}

		return e.complexity.Note.ID(childComplexity), true

	case "Note.title":
		if e.complexity.Note.Title == nil {
			break
		}

		return e.complexity.Note.Title(childComplexity), true

	case "Note.updateTime":
		if e.complexity.Note.UpdateTime == nil {
			break
		}

		return e.complexity.Note.UpdateTime(childComplexity), true

	case "Note.userId":
		if e.complexity.Note.UserID == nil {
			break
		}

		return e.complexity.Note.UserID(childComplexity), true

	case "NotesResponse.cursor":
		if e.complexity.NotesResponse.Cursor == nil {
			break
		}

		return e.complexity.NotesResponse.Cursor(childComplexity), true

	case "NotesResponse.notes":
		if e.complexity.NotesResponse.Notes == nil {
			break
		}

		return e.complexity.NotesResponse.Notes(childComplexity), true

	case "PresignedUrl.File":
		if e.complexity.PresignedUrl.File == nil {
			break
		}

		return e.complexity.PresignedUrl.File(childComplexity), true

	case "PresignedUrl.ObjectId":
		if e.complexity.PresignedUrl.ObjectID == nil {
			break
		}

		return e.complexity.PresignedUrl.ObjectID(childComplexity), true

	case "PresignedUrl.Url":
		if e.complexity.PresignedUrl.URL == nil {
			break
		}

		return e.complexity.PresignedUrl.URL(childComplexity), true

	case "Query.listNotes":
		if e.complexity.Query.ListNotes == nil {
			break
		}

		args, err := ec.field_Query_listNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListNotes(childComplexity, args["input"].(*model.NotesInput)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "RefreshToken.createTime":
		if e.complexity.RefreshToken.CreateTime == nil {
			break
		}

		return e.complexity.RefreshToken.CreateTime(childComplexity), true

	case "RefreshToken.id":
		if e.complexity.RefreshToken.ID == nil {
			break
		}

		return e.complexity.RefreshToken.ID(childComplexity), true

	case "RefreshToken.updateTime":
		if e.complexity.RefreshToken.UpdateTime == nil {
			break
		}

		return e.complexity.RefreshToken.UpdateTime(childComplexity), true

	case "RefreshToken.userId":
		if e.complexity.RefreshToken.UserID == nil {
			break
		}

		return e.complexity.RefreshToken.UserID(childComplexity), true

	case "SignInResponse.accessToken":
		if e.complexity.SignInResponse.AccessToken == nil {
			break
		}

		return e.complexity.SignInResponse.AccessToken(childComplexity), true

	case "SignInResponse.refreshToken":
		if e.complexity.SignInResponse.RefreshToken == nil {
			break
		}

		return e.complexity.SignInResponse.RefreshToken(childComplexity), true

	case "SignInResponse.user":
		if e.complexity.SignInResponse.User == nil {
			break
		}

		return e.complexity.SignInResponse.User(childComplexity), true

	case "User.createTime":
		if e.complexity.User.CreateTime == nil {
			break
		}

		return e.complexity.User.CreateTime(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.updateTime":
		if e.complexity.User.UpdateTime == nil {
			break
		}

		return e.complexity.User.UpdateTime(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateNoteInput,
		ec.unmarshalInputNotesInput,
		ec.unmarshalInputSignInInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

//go:embed "schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphqls", Input: sourceData("schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
